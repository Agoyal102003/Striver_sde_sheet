//Approach 1-> 
class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        sort(nums.begin(), nums.end());
        for(int i=0; i<nums.size(); i++)
        {
            if(nums[i]==nums[i+1])
            {
                return nums[i];
            }
        }
        return -1;
    }
};

// Approach 2-> 

int findDuplicate(vector<int>& nums) {
    // Floyd's Tortoise and Hare (Cycle Detection)
    int slow = nums[0];
    int fast = nums[0];

    // Phase 1: Detect the intersection point of the two runners
    do {
        slow = nums[slow];
        fast = nums[nums[fast]];
    } while (slow != fast);

    // Phase 2: Find the entrance to the cycle (duplicate number)
    slow = nums[0];
    while (slow != fast) {
        slow = nums[slow];
        fast = nums[fast];
    }

    return slow;
}
